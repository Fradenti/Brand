// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// PSM
arma::mat PSM(arma::mat inds);
RcppExport SEXP _brand_PSM(SEXP indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inds(indsSEXP);
    rcpp_result_gen = Rcpp::wrap(PSM(inds));
    return rcpp_result_gen;
END_RCPP
}
// LogSumExp
double LogSumExp(arma::colvec logX);
RcppExport SEXP _brand_LogSumExp(SEXP logXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type logX(logXSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSumExp(logX));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm_arma
double dmvnrm_arma(arma::mat x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _brand_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// UPD_Sticks_Beta_cpp
arma::colvec UPD_Sticks_Beta_cpp(arma::mat AB, int L_new, double alphaDP);
RcppExport SEXP _brand_UPD_Sticks_Beta_cpp(SEXP ABSEXP, SEXP L_newSEXP, SEXP alphaDPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type AB(ABSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< double >::type alphaDP(alphaDPSEXP);
    rcpp_result_gen = Rcpp::wrap(UPD_Sticks_Beta_cpp(AB, L_new, alphaDP));
    return rcpp_result_gen;
END_RCPP
}
// StickBreaker_cpp
arma::colvec StickBreaker_cpp(arma::colvec V);
RcppExport SEXP _brand_StickBreaker_cpp(SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(StickBreaker_cpp(V));
    return rcpp_result_gen;
END_RCPP
}
// Update_Theta_cpp
List Update_Theta_cpp(arma::mat Y, arma::mat AB, arma::colvec m_H, double k_H, double v_H, arma::mat S_H, int L_new, int p);
RcppExport SEXP _brand_Update_Theta_cpp(SEXP YSEXP, SEXP ABSEXP, SEXP m_HSEXP, SEXP k_HSEXP, SEXP v_HSEXP, SEXP S_HSEXP, SEXP L_newSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AB(ABSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type m_H(m_HSEXP);
    Rcpp::traits::input_parameter< double >::type k_H(k_HSEXP);
    Rcpp::traits::input_parameter< double >::type v_H(v_HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S_H(S_HSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_Theta_cpp(Y, AB, m_H, k_H, v_H, S_H, L_new, p));
    return rcpp_result_gen;
END_RCPP
}
// Update_Theta_cpp_TRAIN
List Update_Theta_cpp_TRAIN(arma::mat Y, arma::mat AB, arma::mat MU_g, double k_g, arma::cube SIGMA_g, double v_g, int G, int p);
RcppExport SEXP _brand_Update_Theta_cpp_TRAIN(SEXP YSEXP, SEXP ABSEXP, SEXP MU_gSEXP, SEXP k_gSEXP, SEXP SIGMA_gSEXP, SEXP v_gSEXP, SEXP GSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AB(ABSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type MU_g(MU_gSEXP);
    Rcpp::traits::input_parameter< double >::type k_g(k_gSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type SIGMA_g(SIGMA_gSEXP);
    Rcpp::traits::input_parameter< double >::type v_g(v_gSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_Theta_cpp_TRAIN(Y, AB, MU_g, k_g, SIGMA_g, v_g, G, p));
    return rcpp_result_gen;
END_RCPP
}
// Upd_Zeta_cpp
arma::colvec Upd_Zeta_cpp(arma::mat Y, arma::mat mu_all, arma::cube Sigma_all, arma::colvec Uitilde, arma::colvec xitilde, arma::colvec log_pitilde, int G, int n, int L_new, arma::colvec poss_lab);
RcppExport SEXP _brand_Upd_Zeta_cpp(SEXP YSEXP, SEXP mu_allSEXP, SEXP Sigma_allSEXP, SEXP UitildeSEXP, SEXP xitildeSEXP, SEXP log_pitildeSEXP, SEXP GSEXP, SEXP nSEXP, SEXP L_newSEXP, SEXP poss_labSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_all(mu_allSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Sigma_all(Sigma_allSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Uitilde(UitildeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xitilde(xitildeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type log_pitilde(log_pitildeSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type poss_lab(poss_labSEXP);
    rcpp_result_gen = Rcpp::wrap(Upd_Zeta_cpp(Y, mu_all, Sigma_all, Uitilde, xitilde, log_pitilde, G, n, L_new, poss_lab));
    return rcpp_result_gen;
END_RCPP
}
// Upd_alphabeta_t_cpp
arma::mat Upd_alphabeta_t_cpp(arma::mat Y, arma::mat effe_train, arma::mat effe_test, arma::mat sigma_train, arma::mat sigma_test, arma::colvec pidir, arma::colvec omega, int G, int n, int L, int t, arma::colvec poss_lab);
RcppExport SEXP _brand_Upd_alphabeta_t_cpp(SEXP YSEXP, SEXP effe_trainSEXP, SEXP effe_testSEXP, SEXP sigma_trainSEXP, SEXP sigma_testSEXP, SEXP pidirSEXP, SEXP omegaSEXP, SEXP GSEXP, SEXP nSEXP, SEXP LSEXP, SEXP tSEXP, SEXP poss_labSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_train(effe_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_test(effe_testSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_train(sigma_trainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_test(sigma_testSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type pidir(pidirSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type poss_lab(poss_labSEXP);
    rcpp_result_gen = Rcpp::wrap(Upd_alphabeta_t_cpp(Y, effe_train, effe_test, sigma_train, sigma_test, pidir, omega, G, n, L, t, poss_lab));
    return rcpp_result_gen;
END_RCPP
}
// DN
arma::colvec DN(arma::colvec X, arma::colvec M, arma::colvec S);
RcppExport SEXP _brand_DN(SEXP XSEXP, SEXP MSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(DN(X, M, S));
    return rcpp_result_gen;
END_RCPP
}
// Update_effe_test_t_cpp
arma::mat Update_effe_test_t_cpp(arma::mat Y, arma::mat alphabeta, int L_new, int t, arma::colvec tau_k, arma::colvec R, arma::mat sigma_test, arma::colvec ak);
RcppExport SEXP _brand_Update_effe_test_t_cpp(SEXP YSEXP, SEXP alphabetaSEXP, SEXP L_newSEXP, SEXP tSEXP, SEXP tau_kSEXP, SEXP RSEXP, SEXP sigma_testSEXP, SEXP akSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alphabeta(alphabetaSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type tau_k(tau_kSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_test(sigma_testSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ak(akSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_effe_test_t_cpp(Y, alphabeta, L_new, t, tau_k, R, sigma_test, ak));
    return rcpp_result_gen;
END_RCPP
}
// Update_effe_train_t_cpp
arma::mat Update_effe_train_t_cpp(arma::mat Y, arma::mat alphabeta, int G, int t, arma::mat f_bar_g, arma::mat sigma_train, double KAPPAG);
RcppExport SEXP _brand_Update_effe_train_t_cpp(SEXP YSEXP, SEXP alphabetaSEXP, SEXP GSEXP, SEXP tSEXP, SEXP f_bar_gSEXP, SEXP sigma_trainSEXP, SEXP KAPPAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alphabeta(alphabetaSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f_bar_g(f_bar_gSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_train(sigma_trainSEXP);
    Rcpp::traits::input_parameter< double >::type KAPPAG(KAPPAGSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_effe_train_t_cpp(Y, alphabeta, G, t, f_bar_g, sigma_train, KAPPAG));
    return rcpp_result_gen;
END_RCPP
}
// Update_sigma_test_t_cpp
arma::mat Update_sigma_test_t_cpp(arma::mat Y, arma::mat alphabeta, arma::mat effe_test, int L_new, int t, double asig, double bsig);
RcppExport SEXP _brand_Update_sigma_test_t_cpp(SEXP YSEXP, SEXP alphabetaSEXP, SEXP effe_testSEXP, SEXP L_newSEXP, SEXP tSEXP, SEXP asigSEXP, SEXP bsigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alphabeta(alphabetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_test(effe_testSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type asig(asigSEXP);
    Rcpp::traits::input_parameter< double >::type bsig(bsigSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_sigma_test_t_cpp(Y, alphabeta, effe_test, L_new, t, asig, bsig));
    return rcpp_result_gen;
END_RCPP
}
// Update_sigma_train_t_cpp
arma::mat Update_sigma_train_t_cpp(arma::mat Y, arma::mat alphabeta, arma::mat effe_train, int G, int t, arma::mat a_priorG, arma::mat b_priorG);
RcppExport SEXP _brand_Update_sigma_train_t_cpp(SEXP YSEXP, SEXP alphabetaSEXP, SEXP effe_trainSEXP, SEXP GSEXP, SEXP tSEXP, SEXP a_priorGSEXP, SEXP b_priorGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alphabeta(alphabetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_train(effe_trainSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a_priorG(a_priorGSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b_priorG(b_priorGSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_sigma_train_t_cpp(Y, alphabeta, effe_train, G, t, a_priorG, b_priorG));
    return rcpp_result_gen;
END_RCPP
}
// Update_tau_l
arma::colvec Update_tau_l(double a_tau, double b_tau, arma::mat effe_test, int L_new, int t, arma::colvec OOR, arma::colvec a_l);
RcppExport SEXP _brand_Update_tau_l(SEXP a_tauSEXP, SEXP b_tauSEXP, SEXP effe_testSEXP, SEXP L_newSEXP, SEXP tSEXP, SEXP OORSEXP, SEXP a_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_tau(a_tauSEXP);
    Rcpp::traits::input_parameter< double >::type b_tau(b_tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_test(effe_testSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type OOR(OORSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type a_l(a_lSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_tau_l(a_tau, b_tau, effe_test, L_new, t, OOR, a_l));
    return rcpp_result_gen;
END_RCPP
}
// Update_a_l
arma::colvec Update_a_l(arma::mat effe_test, int L_new, arma::colvec tau_l, arma::colvec R, double s, int t, arma::colvec OneOverR);
RcppExport SEXP _brand_Update_a_l(SEXP effe_testSEXP, SEXP L_newSEXP, SEXP tau_lSEXP, SEXP RSEXP, SEXP sSEXP, SEXP tSEXP, SEXP OneOverRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type effe_test(effe_testSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type tau_l(tau_lSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type OneOverR(OneOverRSEXP);
    rcpp_result_gen = Rcpp::wrap(Update_a_l(effe_test, L_new, tau_l, R, s, t, OneOverR));
    return rcpp_result_gen;
END_RCPP
}
// Upd_ZETA_t_SLICE
arma::mat Upd_ZETA_t_SLICE(arma::mat Y, arma::mat effe_ALL, arma::mat sigma_ALL, arma::colvec log_pitilde, arma::colvec Uitilde, arma::colvec xitilde, int G, int n, int L_new, arma::colvec poss_lab);
RcppExport SEXP _brand_Upd_ZETA_t_SLICE(SEXP YSEXP, SEXP effe_ALLSEXP, SEXP sigma_ALLSEXP, SEXP log_pitildeSEXP, SEXP UitildeSEXP, SEXP xitildeSEXP, SEXP GSEXP, SEXP nSEXP, SEXP L_newSEXP, SEXP poss_labSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type effe_ALL(effe_ALLSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_ALL(sigma_ALLSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type log_pitilde(log_pitildeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Uitilde(UitildeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xitilde(xitildeSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type L_new(L_newSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type poss_lab(poss_labSEXP);
    rcpp_result_gen = Rcpp::wrap(Upd_ZETA_t_SLICE(Y, effe_ALL, sigma_ALL, log_pitilde, Uitilde, xitilde, G, n, L_new, poss_lab));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_brand_PSM", (DL_FUNC) &_brand_PSM, 1},
    {"_brand_LogSumExp", (DL_FUNC) &_brand_LogSumExp, 1},
    {"_brand_dmvnrm_arma", (DL_FUNC) &_brand_dmvnrm_arma, 4},
    {"_brand_UPD_Sticks_Beta_cpp", (DL_FUNC) &_brand_UPD_Sticks_Beta_cpp, 3},
    {"_brand_StickBreaker_cpp", (DL_FUNC) &_brand_StickBreaker_cpp, 1},
    {"_brand_Update_Theta_cpp", (DL_FUNC) &_brand_Update_Theta_cpp, 8},
    {"_brand_Update_Theta_cpp_TRAIN", (DL_FUNC) &_brand_Update_Theta_cpp_TRAIN, 8},
    {"_brand_Upd_Zeta_cpp", (DL_FUNC) &_brand_Upd_Zeta_cpp, 10},
    {"_brand_Upd_alphabeta_t_cpp", (DL_FUNC) &_brand_Upd_alphabeta_t_cpp, 12},
    {"_brand_DN", (DL_FUNC) &_brand_DN, 3},
    {"_brand_Update_effe_test_t_cpp", (DL_FUNC) &_brand_Update_effe_test_t_cpp, 8},
    {"_brand_Update_effe_train_t_cpp", (DL_FUNC) &_brand_Update_effe_train_t_cpp, 7},
    {"_brand_Update_sigma_test_t_cpp", (DL_FUNC) &_brand_Update_sigma_test_t_cpp, 7},
    {"_brand_Update_sigma_train_t_cpp", (DL_FUNC) &_brand_Update_sigma_train_t_cpp, 7},
    {"_brand_Update_tau_l", (DL_FUNC) &_brand_Update_tau_l, 7},
    {"_brand_Update_a_l", (DL_FUNC) &_brand_Update_a_l, 7},
    {"_brand_Upd_ZETA_t_SLICE", (DL_FUNC) &_brand_Upd_ZETA_t_SLICE, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_brand(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
